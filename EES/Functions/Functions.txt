$Unitsystem SI K Pa J mass rad
$Tabstops 0.2 0.4 0.6 0.8 1.0
"<><><><><><><><><><><><><><><><><><><><><><><><><><><><>"
$Bookmark 1. Libraries
"To import the internal or external libraries"
"<><><><><><><><><><><><><><><><><><><><><><><><><><><><>"
$Bookmark 2. Model discription, impotant comments
"! PropSI and PropSIZ routines in CoolProp can only work with K, Pa, J, mass set of units. Please verify your Unit System definition"
"References:
[1] Schl√ºnder EU, Transfer ICfH, Mass. Heat exchanger design handbook: Hemisphere Pub. Corp., 1989."
"<><><><><><><><><><><><><><><><><><><><><><><><><><><><>"
$bookmark 3. Functions - Procedures
$bookmark Heat transfer: robustness lograithmic temperature difference
Procedure rlmtd(T_hf_su,T_hf_ex,T_cf_su,T_cf_ex:DELTAT_log)
 
xi = 1E3
 
If T_cf_su < T_hf_ex - 1 Then
	If T_cf_ex < T_hf_su-1 Then
		If (T_hf_su-T_cf_ex) <> (T_hf_ex-T_cf_su) Then
			DELTAT_log = ((T_hf_su - T_cf_ex) - (T_hf_ex - T_cf_su))/ln((T_hf_su-T_cf_ex)/(T_hf_ex-T_cf_su))
		Else
			DELTAT_log = T_hf_su - T_cf_ex
		Endif
	Else
		DELTAT_log = (T_hf_ex - T_cf_su - 1)/ln(T_hf_ex - T_cf_su) * 1/(1 + xi*(T_cf_ex + 1 - T_hf_su))
	Endif
Else
	If T_cf_ex < T_hf_su-1 Then
		DELTAT_log = (T_hf_su - T_cf_ex - 1)/ln(T_hf_su - T_cf_ex) * 1/(1+xi*(T_cf_su + 1 - T_hf_ex))
	Else
		DELTAT_log = 1/( (1+xi * (T_cf_su + 1 - T_hf_ex)) * (1 + xi*(T_cf_ex + 1 - T_hf_su)))
	Endif
Endif
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Heat transfer: pool boiling critical heat flux
Procedure pool_boiling_critical_heatflux(Fluid$,Geom$,L,T_sat,q_flux:q_flux_critical)
 
q_flux_critical = critical_heat_flux(Fluid$, Geom$, L, T_sat)
 
If ((q_flux > q_flux_critical) or (q_flux = q_flux_critical)) Then Call warning('heat flux must be smaller than critical heat flux. The value of critical heat flux is XXXF1',q_flux_critical)
 
End
"~~~~~~~~~~~~~~~~~~~~"
 $bookmark Turbomachinary: axial turbine stage efficiency
Procedure axial_turbine_stage_efficiency(F$,m_dot, h_in,P_in,P_out,stages_N#:eta_s,V_r, SP,N_S,RPM,SP_last)
"The turbine stage efficiency is found to be a function of three main parameters: the expansion ratio, defined as the specific volume variation across the turbine in an isentropic process; the dimensional parameter, 
which acounts for actural turbine dimensions, and the specific speed."
s_in 			= propssi('S','P',P_in,'H',h_in,F$)
rho_in 			= propssi('D','P',P_in,'H',h_in,F$)
V_dot_in 		= m_dot/rho_in
 
V_dot_out_s	= m_dot/propssi('D','P',P_out,'S',s_in,F$)
h_out_s		= propssi('H','P',P_out,'S',s_in,F$)
 
SP				= sqrt(V_dot_out_s)/(h_in-h_out_s)^(1/4) "Size parameter"
V_r				= V_dot_out_s/V_dot_in "volume ratio"
 
N_min_Vr 		= ceil(V_r/4) "volume flow ration limit"
N_min_h 		= ceil((h_in-h_out_s)/65000) "enthalpy drop limit"
N_min			= max(N_min_Vr,N_min_h) "minimum recommended turbine stage"
If (V_r > 4) Then Call warning('The volume flow ration is greater than 4, the minimum number of turbine stage should be equal to V_r/4. This value is XXXF1',N_min_Vr)
If ((h_in-h_out_s) > 65000) Then Call warning('The enthalpy drop across turbine is greater than 65 kJ/kg, the minimum number of turbine stage should be equal to (h_in-h_out_s)/65000. This value is XXXF1',N_min_h)
 
SP_last 		= stages_N#^(1/4)*SP
 
X				= ln(SP)
Y				= ln(V_r)
 
If ((SP < 0.01) OR (SP>1.0)) Then Call warning('The specific volume variation across the turbine in an isentropic process is out of applicable range. This value should be from 0.01-1.0. The such value is XXXA1', X)
If ((V_r<1) OR (V_r>200)) Then Call warning('The turbine dimensional parameter is out of applicable range. This value should be from 1-10. The such value is XXXA1',Y)
 
eta_s_1 		= 0.90831500-0.05248690*X-0.04799080*X^2-0.01710380*X^3-0.00244002*X^4+0.04961780*Y-0.04894860*Y^2+0.01171650*Y^3-0.00100473*Y^4+0.05645970*X*Y-0.01859440*X*Y^2+0.01288860*X^2*Y+0.00178187*X*Y^3-0.00021196*X^2*Y^3+0.00078667*X^3*Y^2
 
eta_s_2		= 0.923406-0.0221021*X-0.0233814*X^2-0.00844961*X^3-0.0012978*X^4-0.00069293*V_r+0.0146911*Y-0.0102795*Y^2+0.000317241*Y^4+0.0163959*X*Y-0.00515265*X*Y^2+0.00358361*X^2*Y+0.000554726*X*Y^3+0.000293607*X^3*Y^2
 
eta_s_3		= 0.932274-0.01243*X-0.018*X^2-0.00716*X^3-0.00118*X^4-0.00044*V_r-0.0016*Y^3+0.000298*Y^4+0.005959*X*Y-0.00163*X*Y^2+0.001946*X^2*Y+0.000163*X*Y^3+0.000211*X^3*Y^2
 
If stages_N# = 1 Then eta_s = eta_s_1
If stages_N# = 2 Then eta_s = eta_s_2
If ((stages_N# = 3) or (stages_N# > 3)) Then eta_s = eta_s_3
 
N_S 			= 0.132 + 1.377*SP -0.005265*V_r -19.23*SP^2 + 0.02438*SP*V_r +  8.805e-05*V_r^2 +  95.09*SP^3  -0.1279*SP^2*V_r +  2.199e-05*SP*V_r^2  -7.128e-07*V_r^3 -170.6*SP^4 +  0.2319*SP^3*V_r + 3.959e-06*SP^2*V_r^2-2.097e-07*SP*V_r^3 + 1.291e-09*V_r^4 + 93.36*SP^5  -0.1279*SP^4*V_r + 3.738e-06*SP^3*V_r^2-4.823e-08*SP^2*V_r^3 + 7.197e-10*SP*V_r^4 + 2.358e-12*V_r^5
 
N_S1			= interpolate2dm('Ns_opt', SP, V_r) 
 
RPM 			= 60*N_S*((h_in-h_out_s)/stages_N#)^(3/4)/(V_dot_out_s^0.5)
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Plate heat exchanger: Thonon correlation
Procedure thonon(F$,P,T,m_dot,b,W_phe,N_phe,L_h,beta,phi:h,DELTAp)
 
UP$ 	= unitsystem$('Pressure')
cp 		= propssi('C','T',T,'p',p,F$) "J/kg-K"
rho 	= propssi('D','T',T,'p',p,F$) "kg/m^3"
mu 	= propssi('V','T',T,'p',p,F$) "Pa.s or kg/m-s"
k 		= propssi('L','T',T,'p',p,F$) "W/m-K"
//k		= conductivity(F$,T = T,P=P)
 
Pr 		= cp*mu/k "dimensionless"
G 		= m_dot/(b*W_phe*(N_phe-1)/2)
D_h 	= 2*b/phi
Re 		= G*D_h/mu
 
If beta = 75 Then
	C_1 = 0.1000
	m = 0.687
	If Re <= 1000 Then
		C_2 = 28.21
		pp= 0.900
	Endif
	If Re > 1000 Then
		C_2 = 0.872
		pp = 0.392
	Endif
Endif
 
If beta = 60 Then
	C_1 = 0.2267
	m = 0.631
	If Re <= 550 Then
		C_2 = 26.34
		pp= 0.830
	Endif
	If Re > 550 Then
		C_2 = 0.572
		pp = 0.217
	Endif
Endif
 
If beta = 45 Then
	C_1 = 0.2998
	m = 0.645
	If Re <= 200 Then
		C_2 = 18.19
		pp= 0.682
	Endif
	If Re > 200 Then
		C_2 = 0.6857
		pp = 0.172
	Endif
Endif
 
If beta = 30 Then
	C_1 = 0.2946
	m = 0.7
	If Re <= 160 Then
		C_2 = 45.57
		pp= 0.67
	Endif
	If Re > 160 Then
		C_2 = 0.370
		pp = 0.172
	Endif
Endif
 
"!Convergence"
{Re 	= max(100,Re)
Pr 		= max(0.5,Pr)}
 
Nu 			= C_1 * Re^m*Pr^(1/3)
f 			= C_2 * Re^(-pp)
 
h			= Nu * k / D_h
DELTAp 	= ((f*2*G^2/rho * L_h)/D_h)*convert(Pa,UP$)
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Shell-and-Tube: single phase shell side heat transfer (Kern method)
Procedure heattransfer_shell_sp_kern(F$,T_in, T_out, P, m_dot,D,Pitch$,Pitch,OD,T_w,x_B,L,N_sp:h_shell,DELTAp)
"! single phase heat transfer and pressure drop in shell side using Kern method"
 
//mu	= viscosity(F$,T=(T_in+T_out)/2,P=P)
mu		= propssi('V','P',P,'T',(T_in+T_out)/2,F$)
//mu_w	= viscosity(F$,T=T_w,P=P)
mu_w	= propssi('V','P',P,'T',T_w,F$)
//k		= conductivity(F$,T = (T_in+T_out)/2,P=P)
k		= propssi('L','P',P,'T',(T_in+T_out)/2,F$)
cp		= propssi('C','T',(T_in+T_out)/2,'P',P,F$)
rho		= propssi('D','T',(T_in+T_out)/2,'P',P,F$)
phi 	= (mu/mu_w)^0.14
 
B			= x_B*D "baffle spacing"
C_prime	= Pitch - OD "clearance between adjacent tubes"
A_s		= D*C_prime*B/Pitch "bundle crossflow area"
G			= m_dot/A_s
 
If Pitch$ = 'square' Then
	De 		= 4*(Pitch^2-pi#*OD^2/4)/(pi#*OD) "square pitch"
Else
	De		= 4*(Pitch^2*3^0.5/4-pi#*OD^2/8)/(pi#*OD/2) "triangle pitch"
Endif
 
Re			= G*De/mu "Reynolds number"
If ((Re < 2e3) or (Re > 1e6)) Then Call warning('Reynolds number should be in the range from 2e3 to 1e6 for heat transfer coefficient. The value of Reynolds number is XXXA1', Re)
If ((Re < 4e2) or (Re > 1e6)) Then Call warning('Reynolds number should be in the range from 4e2 to 1e6 for pressure drop. The value of Reynolds number is XXXA1', Re)
 
Pr			= cp*mu/k "Prandtl number"
Nusselt 	= 0.36*Re^0.55*Pr^(1/3)*(mu/mu_w)^0.14 "Nusselt number"
h_shell 	= k*Nusselt/De "shell side heat transfer coefficient"
 
"! Pressure drop"
N_b 		= L/B-1 
f			= exp(0.576-0.19*ln(Re))
DELTAp	= f*G^2*(N_b+1)*D/(2*rho*De*phi)*N_sp
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Shell-and-tube: Single phase tube side heat transfer
Procedure heattransfer_sp_circulartube(F$,T,P,G,D,L,N_tp:h,DELTAp)
"! single-phase heat transfer and pressure drop inside circular tube"
 
rho	= propssi('D','T',T,'P',P,F$) "density in kg/m^3"
cp 	= propssi('C','T',T,'P',P,F$) "isobaric specific heat in J/kg-K"
k 	= propssi('L','T',T,'P',P,F$) "thermal conductivity in W/m-K"
mu	= propssi('V','T',T,'P',P,F$) "dynamic viscosity in "
 
Re = G/mu*D "dimensionless Reynolds number"
 
Prandtl = cp*mu/k "dimesionless Prandtl number"
 
If Re < 2300 Then 
	Nusselt 	= 4.36 "dimesionless Nusselt number"
	f 			= 64/Re
Else
	f 			= (0.790*ln(Re)-1.64)^(-2) "dimesionless frictional factor"
	Nusselt 	= (f/8)*(Re-1000)*Prandtl/(1+12.7*(f/8)^0.5*(Prandtl^(2/3)-1))
Endif
 
h = Nusselt*k/D "! single-phase heat transfer coefficient in kW/m^2-K"
 
"Pressure drop"
V = G/rho
 
DELTAp_reg 	= N_tp*f*L*rho*V^2/(2*D)
DELTAP_sing	= 4*N_tp*rho*V^2/2
DELTAp 		= DELTAp_reg+DELTAp_sing
 
End
 "~~~~~~~~~~~~~~~~~~~~"
$bookmark Shell-and-tube: Ideal tube bank correlation
Procedure ideal_tube_bank_correlation(:alpha_id)
"The shell-side method is based on the heat transfer j_i factor and the friction factor f_i from the data on ideal tube banks and then correcting these values for the non-idealistics of the flow in a baffed exchanger"
 
End
 "~~~~~~~~~~~~~~~~~~~~"
 $bookmark Shell-and-tube: Two-phase shell side heat transfer (Kern method)
Procedure heattransfer_shell_tp_kern(F$,m_dot,T_sat,T_w,D, Pitch$,Pitch,OD,x_B,L,N_sp,N,x_e:h_m,DELTAp,f,Re)
"! two-phase heat transfer and pressure drop in shell side using Kern method"
 
mu_v		= propssi('V','T',T_sat,'Q',1,F$)
rho_v		= propssi('D','T',T_sat,'Q',1,F$)
phi			= 1
 
Call cond_horizontal_tube(F$,T_sat,T_w,OD:h_m,Nusselt_m)
h_m		= h_m*N^(-1/6)
Nusselt_m	= Nusselt_m*N^(-1/6)
 
B			= x_B*D "baffle spacing"
C_prime	= Pitch - OD "clearance between adjacent tubes"
A_s		= D*C_prime*B/Pitch "bundle crossflow area"
G			= m_dot/A_s
 
If Pitch$ = 'square' Then
	De 		= 4*(Pitch^2-pi#*OD^2/4)/(pi#*OD) "square pitch"
Else
	De		= 4*(Pitch^2*3^0.5/4-pi#*OD^2/8)/(pi#*OD/2) "triangle pitch"
Endif
 
Re			= G*De/mu_v "Reynolds number"
 
If ((Re < 2e3) or (Re > 1e6)) Then Call warning('Reynolds number should be in the range from 2e3 to 1e6 for heat transfer coefficient. The value of Reynolds number is XXXA1', Re)
If ((Re < 4e2) or (Re > 1e6)) Then Call warning('Reynolds number should be in the range from 4e2 to 1e6 for pressure drop. The value of Reynolds number is XXXA1', Re)
 
"! Pressure drop:The basic procedure is to calculate the shell-side pressure drop as if the vapor phase flowed uncondensed for the entire length and then to correct it by a two-phase multiplier Phi_tt^2"
N_b 		= L/B-1
phi_vo 		= 0.33+0.22*x_e+0.61*x_e^2 "two-phase multiplier"
 
{D_inch 	= D*convert(m,in)
If (D_inch < 8) or (D_inch> 42) Then Call warning('D_inch should be in the range of 8 - 42 in. The value of D_inch is XXXF1',D_inch)
f_1 		= (0.0076+0.000166*D_inch)*Re^(-0.125)
If (D_inch > 23.25) Then D_inch = 23.25 
f_2 		= (0.0016+5.8e-5*D_inch)*Re^(-0.157)
f 			= 144*(f_1-1.25*(1-x_B)*(f_1-f_2))
DELTAp	= f*G^2*(N_b+1)*D/(2000*(rho_v/1000)*De*phi)*N_sp}
 
f			= exp(0.576-0.19*ln(Re))
DELTAp	= f*G^2*(N_b+1)*D/(2*rho_v*De*phi)*N_sp
 
DELTAp 	= phi_vo*DELTAp
 
End
 "~~~~~~~~~~~~~~~~~~~~"
 $bookmark Shell-and-tube: laminar film condensation on a single horizontal tube
Procedure cond_horizontal_tube(F$,T_sat,T_w,OD:h_m,Nusselt_m)
{$Cond_horizontal_tube
This function returns the heat transfer coefficient for condensation on the exterior of an isothermal horizontal tube. It uses a Nusselt-type analysis}
 
rho_l		=propssi('D','T',T_sat,'Q',0,F$)
rho_v		=propssi('D','T',T_sat,'Q',1,F$)
k_l			=propssi('L','T',T_sat,'Q',0,F$)
mu_l		=propssi('V','T',T_sat,'Q',0,F$)
c_l			=propssi('C','T',T_sat,'Q',0,F$)
h_lv		=propssi('H','T',T_sat,'Q',1,F$)-propssi('H','T',T_sat,'Q',0,F$)
h_lv_corr 	=(h_lv+3/8*c_l*(T_sat-T_w))
 
Nusselt_m	=0.728*((rho_l*(rho_l-rho_v)*g#*h_lv_corr*OD^3)/(mu_l*(T_sat-T_w)*k_l))^(1/4)
h_m		= Nusselt_m*k_l/OD	"based off of correlation in Handbook of Heat Transfer page 14.15"
 
End
 "~~~~~~~~~~~~~~~~~~~~"
$bookmark Shell-and-tube: shell side condensation coefficient 
Function shell_cond_coefficient(F$,T_sat,DT_w,D_o,N)
rho_l 	= propssi('D','T',T_sat,'Q',0,F$)
h_lv 	= propssi('H','T',T_sat,'Q',1,F$)- propssi('H','T',T_sat,'Q',0,F$)
k_l 	= propssi('L','T',T_sat,'Q',0,F$)
mu_l 	= propssi('V','T',T_sat,'Q',0,F$)
 
h_o = 0.728*((rho_l^2*g#*h_lv*k_l^3)/(mu_l*DT_w*D_o))^(1/4)*(1/N^(1/6))
 
shell_cond_coefficient = h_o
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Shell-and-tube: LMTD Factor
Procedure lmtd_factor(T_shell_in,T_shell_out,T_tube_in,T_tube_out,N_shell_pass:R,P,F)
 
R = (T_shell_in - T_shell_out)/(T_tube_out-T_tube_in)
P = (T_tube_out-T_tube_in)/(T_shell_in-T_tube_in)
 
alpha = ((1-R*P)/(1-P))^(1/N_shell_pass)
 
If R = 1 Then 
	S 	= P/(N-(N-1)*P)
	F	= S*sqrt(2)/((1-S)*ln((2-S*(2-2^0.5))/(2-S*(2+2^0.5))))
Else
	S = (alpha-1)/(alpha-R)
	F = (sqrt(R^2+1)*ln((1-S)/(1-R*S))/((R-1)*ln((2-S*(R+1-sqrt(R^2+1)))/(2-S*(R+1+sqrt(R^2+1))))))
Endif
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Shell-and-tube: Tube Constant
Procedure tube_const(layout$,N_tp:CL,CTP)
 
"Tube layout constant"
If layout$ = 'square' Then	
	CL	= 1.0 "! CL = 1.0 for 90¬∞ and 45¬∞; CL = 0.87 for 30¬∞ and 60¬∞"
Else
	CL	= 0.87
Endif
 
"Tube count constant"
If N_tp = 1 Then
	CTP = 0.93
Else
	If N_tp = 2 Then
		CTP = 0.9
	Else
		CTP = 0.85
	Endif
Endif
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark shell-and-tube: BWG
Procedure bwg_tube(D_o,BWG:t_tube,D_i,Do\Di,A_i)
 
If BWG = 7 Then t_tube = 0.18*convert(in,m)
If BWG = 8 Then t_tube = 0.165*convert(in,m)
If BWG = 10 Then t_tube = 0.134*convert(in,m)
If BWG = 11 Then t_tube = 0.12*convert(in,m)
If BWG = 12 Then t_tube = 0.109*convert(in,m)
If BWG = 13 Then t_tube = 0.095*convert(in,m)
If BWG = 14 Then t_tube = 0.083*convert(in,m)
If BWG = 15 Then t_tube = 0.072*convert(in,m)
If BWG = 16 Then t_tube = 0.065*convert(in,m)
If BWG = 17 Then t_tube = 0.058*convert(in,m)
If BWG = 18 Then t_tube = 0.049*convert(in,m)
If BWG = 20 Then t_tube = 0.035*convert(in,m)
If BWG = 22 Then t_tube = 0.028*convert(in,m)
If BWG = 24 Then t_tube = 0.022*convert(in,m)
If BWG = 26 Then t_tube = 0.018*convert(in,m)
 
D_i 	= D_o-2*t_tube
Do\Di 	= D_o/D_i
A_i 	= (pi#*D_i^2)/4
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Thermosyphon: Pool Boiling correlations
Procedure pool_boiling(Corr$, F$,T_sat,q_flux:h)
"! pool boiling correlation"
p_atm		= 1e5 "atmospheric pressure in Pa"
P_sat		= propssi('P','T',T_sat,'Q',0,F$) "saturation pressure in Pa"
p_r			= P_sat/propssi('Pcrit','',0,'',0,F$) "dimensionlesss reduced pressure"
rho_l		= propssi('D','T',T_sat,'Q',0,F$) "density at saturated liquid in kg/m^3"
rho_v		= propssi('D','T',T_sat,'Q',1,F$) "density at saturated vapor in kg/m^3"
mu_l 		= propssi('V','T',T_sat,'Q',0,F$) "viscosity at saturated liquid in kg/m-s"
mu_v		= propssi('V','T',T_sat,'Q',1,F$) "viscosity at saturated vapor in kg/m-s"
k_l			= propssi('L','T',T_sat,'Q',0,F$) "thermal conductivity in W/m-K"
MM		= propssi('M','',0,'',0,F$)*1000 "fluid molar mass in kg/kmol"
cp_l		= propssi('C','T',T_sat,'Q',0,F$) "specific heat at saturated liquid"
h_lv		= propssi('H','T',T_sat,'Q',1,F$) - propssi('H','T',T_sat,'Q',0,F$)
 
"Pool boiling heat transer coefficient"
h_Imura		= 0.32*((rho_l^0.65*k_l^0.3*Cp_l^0.7*g#^0.2*q_flux^0.4)/(rho_v^0.25*h_lv^0.4*mu_l^0.1))*(p_sat/p_atm)^0.3 "Imura correlation"
h_Cooper		= 55*MM^(-0.5)*q_flux^0.67*(p_r)^0.12*(-log10(p_r))^(-0.55) "Cooper correlation"
h_Mostinski	= 0.106*(propssi('Pcrit','',0,'',0,F$)/1e5)^0.69*(1.8*p_r^0.17+4*p_r^1.2+10*p_r^10)*q_flux^0.7 "Mostinski correlation"
 
If Corr$	= 'Imura' Then h = h_Imura
If Corr$	='Cooper' Then h = h_Cooper
If Corr$	='Mostinski' Then h = h_Mostinski
End
"~~~~~~~~~~~~~~~~~~~~"
Function bundle_convective_coeffcient(F$,T,m_dot,D)
{
Ref.: Chapter 9, Engineering Data Book III
}
 
rho_l		= propssi('D','T',T_sat,'Q',0,F$) "liquid density"
mu_l		= propssi('V','T',T_sat,'Q',0,F$) "liquid viscosity"
k_l			= propssi('L','T',T_sat,'Q',0,F$) "liquid thermal conductivity"
 
delta 		= (D_delta-D)/2 "liquid thin film"
 
 
Re 			= 4*rho_l*u_l*delta/mu_l
 
alpha		= 4.032*Re^(0.236)*Pr^(0.4)*(k_l/delta)
 
bundle_convective_coeffcient = alpha
 
 
End 
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Thermosyphon: Rohsenow correlation for condensation
Procedure cond_vertical_tpct_rohsenow(F$,T_sat,T_w,L:h,Arg)
"Laminar film condensation on a vertical plate
References:  Chapter 10: Boiling and Condensation, Bergman TL, Lavine AS, Incropera FP, DeWitt DP. Fundamentals of Heat and Mass Transfer. 7th ed2011.
In using the correlation, all liquid properties should be evaluated at the film temperature T_f = (Tsat+Tw)/2"
P_sat		= propssi('P','T',T_sat,'Q',0,F$) "saturation pressure in Pa"
P_crit		= propssi('Pcrit','',0,'',0,F$) "critical pressure in Pa"
rho_l		= propssi('D','T',T_sat,'Q',0,F$) "density at saturated liquid in kg/m^3"
rho_v		= propssi('D','T',T_sat,'Q',1,F$) "density at saturated vapor in kg/m^3"
mu_l		= propssi('V','T',T_sat,'Q',0,F$) "viscosity at saturated liquid in kg/m-s"
mu_v		= propssi('V','T',T_sat,'Q',1,F$) "viscosity at saturated vapor in kg/m-s"
k_l			= propssi('L','T',T_sat,'Q',0,F$)
cp_l		= propssi('C','T',T_sat,'Q',0,F$) "heat specific in J/kg-K"
h_lv 		= propssi('H','T',T_sat,'Q',1,F$)-propssi('H','T',T_sat,'Q',0,F$)
Arg			= T_sat-T_w
If (Arg<=0) Then Arg = 1e-9
h_N 		= 0.943*k_l/L*((L^3*rho_l*(rho_l-rho_v)*g#)/(mu_l*k_l*(Arg))*(h_lv+0.68*cp_l*(Arg)))^0.25
h			= 1.51*h_N*(P_sat/P_crit)^0.15
"Ref: Heat transfer characteristics of titanium water two-phase closed thermosyphon"
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Thermosyphon: Operating limits
Procedure tctp_operatinglimits(F$,D,L_e,T_sat,Q_dot:Q_dot_ent,Q_dot_boil,Q_dot_son)
"! Procedure description"
 
P_sat		= propssi('P','T',T_sat,'Q',0,F$)
h_lv		= propssi('H','T',T_sat,'Q',1,F$)-propssi('H','T',T_sat,'Q',0,F$)
rho_l 		= propssi('D','T',T_sat,'Q',0,F$)
rho_v 		= propssi('D','T',T_sat,'Q',1,F$)	
sigma		= propssi('I','T',T_sat,'Q',0,F$)
A_v 		= (pi#*D^2)/4
 
"Outputs"
Q_dot_ent	= 3.2*h_lv*A_v*(rho_v^(-0.25)+rho_l^(-0.25))^(-2)*(sigma*g#*(rho_l-rho_v))^(0.25)
Q_dot_boil	= (pi#*D*L_e)*0.149*rho_v*h_lv*((sigma*(rho_l-rho_v)*g#)/rho_v^2)^(0.25)
Q_dot_son	= 0.474*A_v*h_lv*(rho_v*P_sat)^(0.5)
 
If (Q_dot>min(Q_dot_ent,Q_dot_boil,Q_dot_son)) Then Call warning('The heat transfer rate of thermosyphon must be lower than minimum operating limit. You should modify some pipe geometrical parameters, e.g. pipe diameter')
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Thermosyphon: Vapor pressure drop
Function deltap_v(F$,T_sat,Q_dot,d_v,l_a)
"Info: Pressure drop of fluid inside Thermosyphon"
 
A_v	= pi#*D_v^2/4 "vapour cross-sectional area"
P_sat	= propssi('P','T',T_sat,'Q',0,F$)
rho_v	= propssi('D','T',T_sat,'Q',1,F$)
mu_v	= propssi('V','T',T_sat,'Q',1,F$)
h_lv	= propssi('H','T',T_sat,'Q',1,F$) - propssi('H','T',T_sat,'Q',0,F$)
 
Re_a	= (Q_dot*d_v)/(mu_v*A_v*h_lv)
 
If Re_a <2300 Then
	DELTAp	=(32*mu_v*Q_dot*l_a)/(rho_v*A_v*h_lv*d_v^2)
Else
	DELTAp	=(0.3164/Re_a^0.25)*(Q_dot^2*l_a)/(2*rho_v*A_v^2*h_lv^2*d_v)
Endif
 
deltap_v = DELTAp
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Thermosyphon: Thermal resistance for condensation
Procedure thermalresistance_cond_esdu(F$,Q,T_sat,D,L_c:R, Re_f)
 
P_sat 		= propssi('P','T',T_sat,'Q',0,F$)
h_lv		= propssi('H','T',T_sat,'Q',1,F$) - propssi('H','T',T_sat,'Q',0,F$) "latent heat"
mu_l		= propssi('V','T',T_sat,'Q',0,F$)
Re_f 		= 4*Q/(h_lv*mu_l*pi#*D)
phi_cond 	= figureofmerit_cond(F$,T_sat)
 
R_ESDU	= 0.235*Q^(1/3)/(D^(4/3)*g#^(1/3)*L_c*phi_cond^(4/3))
 
If (Re_f > 1300) Then
	Call warning('The value of Re_f is larger than 1300')
	R = R_ESDU*191*Re_f^(-0.733)
Else
	If (Re_f<50) Then
		Call warning('These equations are not applicable for Re_f < 50, the value of R is assiged as R_ESDU')
		R = R_ESDU		
	Else
		Call warning('The value of Re_f is greater than 50 and lower than 1300')
		R = R_ESDU
	Endif
Endif
 
// R =  0.345*Q^(1/3)/(D^(4/3)*g#^(1/3)*L_c*phi_cond^(4/3)) "Groll and Rosler correlation in  Marcia BHM. Thermosyphon Technology for Industrial Applications.  Heat Pipes and Solid Sorption Transformations: CRC Press; 2013. p. 411-64."
// Ref.:MacGregor RW, Kew PA, Reay DA. Investigation of low Global Warming Potential working fluids for a closed two-phase thermosyphon. Applied Thermal Engineering. 2013;51(1-2):917-25. 
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Thermosyphon: Thermal resistance for boiling
Procedure thermalresistance_boiling_esdu(F$,Q,D,L_e,T_sat,F:R_film,R_pool,R)
"$ThermalResistance_Boiling_ESDU
F$		: thermosyphon working fluid
Q		: heat transfer rate [W]
D		: diameter [m]
L_e	: evaporator length [m]
T_sat	: saturated temperature
F		: liquid fill = fraction of evaporator covered by static pool
\\http://www.sciencedirect.com/science/article/pii/S1359431112007089"
 
Phi_cond 	= figureofmerit_cond(F$,T_sat)
Phi_boil	= figureofmerit_boil(F$,T_sat)
 
R_film 		=  0.235*Q^(1/3)/(D^(4/3)*g#^(1/3)*L_e*phi_cond^(4/3)) "L_c or L_e?"
R_pool 	= 1/(Phi_boil*g#^0.2*Q^0.4*(pi#*D*L_e)^(0.6))
 
If (R_film>R_pool) Then
	R = R_pool
Else
	R = R_pool*F+R_film*(1-F)
Endif
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Thermosyphon: figure of merit for condensation
Function figureofmerit_cond(F$,T_sat)
 
P_sat 	= propssi('P','T',T_sat,'Q',0,F$)
k_l 	= propssi('L','T',T_sat,'Q',0,F$)
rho_l	= propssi('D','T',T_sat,'Q',0,F$)
mu_l	= propssi('V','T',T_sat,'Q',0,F$)
h_lv	= propssi('H','T',T_sat,'Q',1,F$) - propssi('H','T',T_sat,'Q',0,F$)
 
phi_cond 	= ((h_lv*k_l^3*rho_l^2)/mu_l)^(1/4)
 
figureofmerit_cond = phi_cond
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Thermosyphon: figure of merit for nucleate boiling
Function figureofmerit_boil(F$,T_sat)
 
P_sat 	= propssi('P','T',T_sat,'Q',0,F$)
P_atm	= 101325 [Pa]
k_l 	= propssi('L','T',T_sat,'Q',0,F$)
rho_l	= propssi('D','T',T_sat,'Q',0,F$)
rho_v	= propssi('D','T',T_sat,'Q',1,F$)
mu_l	= propssi('V','T',T_sat,'Q',0,F$)
cp_l	= propssi('C','T',T_sat,'Q',0,F$)
h_lv	= propssi('H','T',T_sat,'Q',1,F$) - propssi('H','T',T_sat,'Q',0,F$)
 
Phi_boil = (0.32*rho_l^0.65*k_l^0.3*cp_l^0.7)/(rho_v^0.25*h_lv^0.4*mu_l^0.1)*(P_sat/P_atm)^0.23
 
figureofmerit_boil = Phi_boil
 
End
"~~~~~~~~~~~~~~~~~~~~"
Function overalleffectiveness(C_dot_h,C_dot_c,epsilon_cn,epsilon_hn)
If (C_dot_h>C_dot_c) Then
	epsilon_t = (1/epsilon_cn+(C_dot_c/C_dot_h)/epsilon_hn)^(-1)
Else
	epsilon_t = (1/epsilon_hn+(C_dot_h/C_dot_c)/epsilon_cn)^(-1)
Endif
overalleffectiveness = epsilon_t
End
"~~~~~~~~~~~~~~~~~~~~"
Procedure thermosyphon1(PipeMat$, F$,ORCF$,D_i,D_o,L_e,L_c,L_a,u_f,M_dot_f,rho_f,T_in_f,P_f,P_atm,T_ev_wf,h_f_c,epsilon_f, alpha_f:Q_dot_cal,Q_dot_ent,Q_dot_boil,Q_dot_son, T_we_o,T_sat_e,T_we_i, T_wc_i,T_wc_o,T_sat_c,h_e,h_c,Q_dot_axial,k_we,k_wc,R_axial,k_axial,P_sat_e,M_dot_v,h_wf,h_f,h_lv_e,R_c,R_e,R_e1,R_pool)
 
"Initialization"
T_sat_e_ini			= 180 +273.15 "put the equation Q_dot_e = pi#*L_e*D_i*h_e*(T_we_i-T_sat_e) in comments"
q_e_ini					= 100000 "put q_e in comment"
 
A_e_o					= pi#*L_e*D_o "outlet evaporator zone surface area"
A_e_i					= pi#*L_e*D_i "inlet evaporator zone surface area"
 
T_we					= (T_we_i+T_we_o)/2 "average wall temperature in K, T_we_i is the external temperature of thermosiphon wall of evaporation side"
k_we 					= conductivity(PipeMat$, T=T_we) "Thermal conductivity of wall in W/m-K"
 
"Heat transfer coefficient"
Call pool_boiling('Imura', F$,T_sat_e,q_e:h_e) "heat transer coefficient in the evaporator is calculated by the correlation of Imura"
R_e1					= 1/(A_e_i*h_e) "Thermal resistance for boiling"
Call thermalresistance_boiling_esdu(F$,Q_dot_e,D_i,L_e,T_sat_e,0.5:R_film,R_pool,R_e)
 
h_f_r 					= radiative_coeff(epsilon_f,alpha_f,T_in_f,T_we_o) "heat tranafer radiatif coefficient of fumes, sigma# is Stefan-Boltzmann constant"
h_f 					= h_f_r+h_f_c
 
"Energy balance" 
Q_dot_e{+Q_dot_axial}	= A_e_o*h_f*(T_in_f-T_we_o)
Q_dot_e 				= (2*pi#*L_e*k_we)/ln(D_o/D_i)*(T_we_o-T_we_i)
Q_dot_e 				= 1/R_e*(T_we_i-T_sat_e)
q_e					= Q_dot_e/A_e_i "heat flux"
 
//T_sat_e 				= PropsSI('T','P',P_sat_e,'Q',0,F$) "evaporating temperature of thermosiphon working fluid"
P_sat_e				= propssi('P','T',T_sat_e,'Q',0,F$)
 
h_lv_e					= propssi('H','P',P_sat_e,'Q',1,F$) - propssi('H','P',P_sat_e,'Q',0,F$)
M_dot_v				= Q_dot_e/h_lv_e
 
"Pressure drop: cf. VDI"
A_v 					= (pi#*D_i^2)/4
A_v 					= pi*d_v^2/4 "to calculate d_v"
 
DELTAp_a 			= deltap_v(F$,T_sat_e,Q_dot_e,d_v,l_a)
DELTAp_c 			= deltap_v(F$,T_sat_c,Q_dot_c,d_v,l_c/2)
DELTAp_e				= deltap_v(F$,T_sat_e,Q_dot_e,d_v,l_e/2)
DELTAP_ev_cd		= DELTAp_a+DELTAp_c+DELTAp_e
P_sat_c				= P_sat_e-DELTAP_ev_cd
 
"! condensation"
T_wc 				= average(T_wc_i,T_wc_o)
k_wc 				= conductivity(PipeMat$,T = T_wc)
"heat transfer coefficient"
 
//T_sat_c				= 200+273.15
//T_sat_c				= PropsSI('T','P',P_sat_c,'Q',0,F$)
P_sat_c				= propssi('P','T',T_sat_c,'Q',0,F$)
 
Call cond_vertical_tpct_rohsenow(F$,T_sat_c,T_wc_i,L_c:h_c,Arg)
Call thermalresistance_cond_esdu(F$,Q_dot_e,T_sat_c,D_i,L_c:R_c, Re_f_c)
R_c1					= 1/(A_cond_i*h_c) "Thermal resistance for condensation"
 
"ORC evaporator"
Call pool_boiling('Cooper',ORCF$,T_ev_wf,q_c:h_wf)
{h_wf					= 55*MM_wf^(-0.5)*q_c^0.67*p_r_wf^0.12*(-log10(p_r_wf))^(-0.55)}
p_r_wf 					= P_ev_wf/propssi('Pcrit','',0,'',0,ORCF$)
MM_wf 				= propssi('M','',0,'',0,ORCF$)*convert(kg/mol,kg/kmol)
P_ev_wf 				= propssi('P','T',T_ev_wf,'Q',0,ORCF$)
 
Q_dot_c   				= Q_dot_e "heat transfer rates"
"Energy balance"
A_cond_o				= pi#*L_c*D_o
A_cond_i				= pi#*L_c*D_i
Q_dot_c{+Q_dot_axial}	= A_cond_o*h_wf*(T_wc_o-T_ev_wf)
Q_dot_c    			= (2*pi#*L_c*k_wc)/ln(D_o/D_i)*(T_wc_i-T_wc_o)
Q_dot_c   				= 1/R_c*(T_sat_c-T_wc_i)
q_c					= Q_dot_c/A_cond_o
 
"axial thermal resistance"
k_axial 				= conductivity(PipeMat$,T=(T_we+T_wc)/2)
A_axial 				= pi#/4*(D_o^2-D_i^2)
R_axial 				= (L_a)/(k_axial*A_axial)
Q_dot_axial			= (T_we-T_wc)/R_axial
 
"!4 Limites de fonctionnement"
Call tctp_operatinglimits(F$,D_v,L_e,T_sat_e,Q_dot_cal:Q_dot_ent,Q_dot_boil,Q_dot_son)
 
Q_dot_cal				= Q_dot_e+Q_dot_axial
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Radiative heat transfer: gas emissivity
Function emissivityhottel(p_CO2,p_H2O,T_g,L)
 
pL = (p_CO2+p_H2O)*L
 
a_0 = interpolate2dm('Emissivitya0', T_g,p_H2O/p_CO2)
a_1 = interpolate2dm('Emissivitya1', T_g,p_H2O/p_CO2)
a_2 = interpolate2dm('Emissivitya2', T_g,p_H2O/p_CO2)
a_3 = interpolate2dm('Emissivitya3', T_g,p_H2O/p_CO2)
 
epsilon_g 			= 10^(a_0+a_1*log10(pL)+a_2*(log10(pL))^2+a_3*(log10(pL))^3)/T_g
emissivityhottel 	= epsilon_g
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Radiative heat transfer: gas absortivity (hottel)
Function absortivityhottel(p_CO2,p_H2O,T_g,T_w,L)
 
epsilon_g 			= emissivityhottel(p_CO2,p_H2O,T_w,L*T_w/T_g)
alpha_g 			= epsilon_g*(T_g/T_w)^0.5
absortivityhottel 	= alpha_g
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Radiative heat transfer: gas absortivity (CMI)
Function coeffabsorptionhottel(pCO2, pH2O, T_g, L)
"The equation of CMI"
P 						= 1.013
Epsilon 				= emissivityhottel(pCO2, pH2O, T_g, L)   
coeffabsorptionhottel 	= -1 / (P * L) * ln(1 - Epsilon)
 
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Radiative heat transfer: radiative heat transfer coefficient
Function radiative_coeff(epsilon,alpha,T1,T2)
"$radiative_coeff
 The function returns the value of radiative heat transfer coefficient"
h = sigma#*(epsilon*T1^4-alpha*T2^4)/(T1-T2)
radiative_coeff = h
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Extenal Flow Finned Tube Bank
Procedure external_flow_finnedtubebank(F$,T_in, T_out, P, w_0, A_0,W_hex,N_L, D_o,D_i,S_T,S_L, t_f,D_f,n_f, Arran$: alpha_v,alpha_m,DELTAp, Nusselt, Re,w_s,A_tot,A_t,A_fpt,eta_f,A_to)
 
{$External_Flow_FinnedTubeBank
External_Flow_FinnedTubeBank(F$,T_in, T_out, P, w_0, A_0, W_hex,N_L, D_o,D_i,S_T,{S_L, }t_f,D_f,n_f, Arrangement$: alpha_v,alpha_m,deltap, Nusselt, Re,w_s,A_tot,A_t,A_fpt) returns
 
Inputs:
F$			: thermosyphon working fluid
T_in		: inlet temperature in K with coolprop library
T_out		: outlet temperature in K with coolprop library
P			: inlet pressure in Pa with coolprop library
w_0		: inflow velocity (VDI heat atlas) or velocity at hex inlet
A_0		: inflow cross sectional area
w_s		: velocity in the smallest cross section
W_hex		: width of heat exchanger
N_L		: Number of tube row
D_o		: outer diamter of tube without fin
D_o		: inner diamter of tube
S_T		: tranversal pitch tube
S_L		: longitudinal pitch tube
t_f			: fin thickness
s_f			: spacing fins
D_f			: fin outer diameter
n_f			: number fins per inch
Arran$		: inline or staggered
 
Outputs:
alpha_v		: virtual heat transfer coefficient
alpha_m	: mean heat transfer coefficient
DELTAp	: Pressure drop
Nusselt	: Nusselt number
Re			: Reynolds number
w_s		: flow velocity in the smallest cross section
A_tot		: total outer surface is defined as the sum of free outer surface per tube, A_t, and total fin surface per tube
A_t			: free outer surface per tube
A_fpt		: total fin surface per tube
eta_f		: fin efficiency
A_to		: surface of bare tube without fin}
 
If S_T/D_f < 1.5 Then Call warning('S_T/D_f should be greater than 1.5, the value of S_T/D_f is XXXF1',S_T/D_F)
 
"! Fluid thermophysical properties"
rho 		= propssi('D', 'P',P,'T',(T_in+T_out)/2,F$)
mu 		= propssi('V', 'P',P,'T',(T_in+T_out)/2,F$)
cp			= propssi('C', 'P',P,'T',(T_in+T_out)/2,F$)
k			= propssi('L', 'P',P,'T',(T_in+T_out)/2,F$)
 
"! Fins parameters"
s_f			= (1/n_f {- t_f})*convert(in, m) "fin spacing"
a 			= s_f - t_f "free spacing between fins"
"Straitened cross section of flow"
A0\As 		= S_T*(a+t_f)/((S_T-D_o)*a+(S_T-D_f)*t_f) "A_s: smallest sectional area between fins"
"! Flow velocity in the smallest cross section: V_max???"
w_s 		= w_0*A0\As
"Influence of temperature"
w_sT 		= w_s*(T_in+T_out)/2/T_in
"Height of heat exchanger"
H_hex		= A_0/W_hex
"number fins single tube"
n_fpt 		= round((H_hex*n_f)/(25.4e-3)+0.5)
"fin surface"
A_f			= pi#/4*(D_f^2-D_o^2)*2
"total fin surface per tube"
A_fpt 		= A_f*n_fpt
"free outer surface per tube"
A_t 		= (n_fpt+1)*pi#*D_o*a
"surface of bare tube without fin"
A_to 		= pi#*D_o*H_hex
"total outer surface"
A_tot		= A_t+A_fpt
"inner surface"
A_i 		= H_hex*pi#*D_i
"Ratio of surfaces"
A\A_to 	= A_tot/A_to
 
Re 			= D_o*w_sT*rho/mu "Reynolds number"
Pr			= cp*mu/k "Prandtl number"
A_ff 		= S_T - D_f +(D_f-D_o)*(1-t_f*n_f/(25.4e-3)) "minimum free flow area of finned-tube per unit length, m^2/m"
A_prime 	= pi#*D_o*(1-t_f/s_f)+pi#/s_f*((D_f^2-D_o^2)/2+D_f*t_f) "the heat transfer area of unit length finned-tube"
F_A		= 1/(A_prime/A_ff+1)
S_D 		= S_T "diagonal pitch"
 
If (arran$ = 'Inline') Then Nusselt = 0.356*Re^0.6*(A\A_to)^(-0.15)*Pr^(1/3)*F_A^0.173*(S_T/S_L)^(-0.475)
If (arran$ = 'staggered') Then Nusselt = 0.284*Re^0.6*(A\A_to)^(-0.15)*Pr^(1/3)*F_A^(-0.075)*(S_T/S_D)^1.06
 
If (N_L > 3) Then
	Nusselt =Nusselt
Else
	Nusselt = Nusselt*(1-exp(-1.11*(N_L+0.488)))
Endif
 
"mean heat transfer coefficient for tube and fin"
alpha_m 	= Nusselt*k/D_o
k_f			= conductivity(Aluminum, T=T_out)
eta_f		= eta_fin_annular_rect(t_f, D_o/2, D_f/2, alpha_m, k_f)
alpha_v 	= alpha_m*(1-(1-eta_f)*A_fpt/A_tot)
"! Pressure drop"
If (arran$ = 'inline') Then
	Eu		= 0.536*Re^(-0.23)*(A\A_to)^0.068**F_A^(-0.343)*(S_T/S_D)^(-2.18)*N_L
Else 
	"Eucler number"
	Eu 		= 0.75*Re^(-0.24)*F_A^(-0.49)*(S_T/S_D)^0.64*N_L
Endif
 
"Pressure drop"
DELTAp 	= rho*w_sT^2*Eu
 
"range of application: VDI Heat atlas"
If (Re>1E5) Then Call warning('Re is out of range for ExternalFlow_Staggered_Bank.  The maximum value is 1E5 while the value supplied is XXXA1',Re)
If (Re<1E3) Then Call warning('Re is out of range for ExternalFlow_Staggered_Bank.  The minimum value is 1E3 while the value supplied is XXXA1',Re)
If A_tot/A_to < 5 Then Call Warning ('A_tot\A_to is out of range. The minimum value is 5 while the value supplied is XXXA1', A_tot/A_to)
If A_tot/A_to > 30 Then Call Warning ('A_tot\A_to is out of range. The maximum value is 30 while the value supplied is XXXA1', A_tot/A_to)
 "!References:
- VDI Heat Atlas, 2nd Ed. 2010
- Mi Sandar Mon (2003), Numerical Investigation of Air-side heat transfer and pressure drop in circular finned-tube heat exchanger, PhD dissertation"
End
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Wet cooling tower: Merkel number
Procedure merkelnumber(M_dot_w_in,T_w_in,T_w_out,P,h_a_in,h_a_out,L\G:KaV\L,h_a1,h_a2,h_a3,h_a4)
 
Range 	= T_w_in-T_w_out
cp_w	= cp(Water,P = P,T = (T_w_in+T_w_out)/2)
 
T1 		= T_w_out+0.1*Range
cp1	= cp(Water, P = P,T = (T1+T_w_out)/2)
h_w1	= enthalpy(AirH2O,T=T1,R=1,P=P)
h_a1	= h_a_in+0.1*L\G*cp1*range
Dh1	= h_w1-h_a1
 
T2		= T_w_out+0.4*Range
cp2	= cp(Water, P = P,T = (T2+T_w_out)/2)
h_w2	= enthalpy(AirH2O,T=T2,R=1,P=P)
h_a2	= h_a_in+0.4*L\G*cp2*range
Dh2	= h_w2-h_a2
 
T3		= T_w_in-0.4*Range
cp3	= cp(Water, P = P,T = (T3+T_w_out)/2) 
h_w3	= enthalpy(AirH2O,T=T3,R=1,P=P)
h_a3	= h_a_out-0.4*L\G*cp3*range
Dh3	= h_w3-h_a3
 
T4		= T_w_in-0.1*Range
cp4	= cp(Water, P = P,T = (T4+T_w_out)/2)
h_w4	= enthalpy(AirH2O,T=T4,R=1,P=P)
h_a4	= h_a_out-0.1*L\G*cp4*range
Dh4	= h_w4-h_a4
 
"Tower characteristics" 
Kav\L	= Range/4*(1/Dh1+1/Dh2+1/Dh3+1/Dh4)*cp_w
 
End 
"~~~~~~~~~~~~~~~~~~~~"
$bookmark Wet cooling tower: Tower specifications
Procedure cooling_tower_fill(fill$,L_cell,W_cell,N_cell,L,G,Me:A_floor,H_fill,H_rz,H_sp,H_tower)
 
A_floor = N_cell*L_cell*W_cell "floor area in m^2" 
G_w 	= L/A_floor "water mass flux in kg/s-m^2" 
G_a 	= G/A_floor "air mass flux in kg/s-m^2"
 
If fill$='splash' Then H_fill = Me/(0.249013*G_w^(-0.464089)*G_a^(0.653578)) "fill zone height in meter with fill type of splash" 
If fill$='trickle' Then H_fill = Me/(0.81707*G_w^(-0.581055)*G_a^(0.670746)) "fill zone height in meter with fill type of trickle" 
If fill$='film' Then H_fill = Me/(0.996604*G_w^(-0.469512)*G_a^(0.790386)) "fill zone height in meter with fill type of film"
 
H_rz 		= H_fill "rain zone height in m" 
H_sp 		= 0.5*H_fill "spray zone height in m" 
H_tower 	= 2.5*H_fill "cooling tower height in m"
 
End
"<><><><><><><><><><><><><><><><><><><><><><><><><><><><>"
$bookmark 4. Examples
"Ex: Air has to be heated up from 90 to 120 C. Heating fluid is vapour condensing at 130 C. The mass flow of air is 1.92 kg/s. The required power then is 59 kW"
 
{"! Inputs"
$bookmark Circular fin tubes
D_f			= 26.4 [mm]*convert(mm,m) "outer diameter of fin in meter"
D_o 		= 25.4 [mm]*convert(mm,m) "outer diameter of tube"
D_i			= 21 [mm]*convert(mm,m)
t_f			= 0.4 [mm] *convert(mm,m) "thickness of fin"
h_f			= (D_f - D_o)/2 "height of fin in meter"
n_f 		= 9 "fins/in."
s_f			= 2.82 [mm]*convert(mm,m)
A_0 		= 1 [m^2]
 
F$ 			= 'air'
T_in 		= 90+273.15
T_out 		= 160+273.15
P		 	= 1e5
m_dot_air 	= 1.92 [kg/s]
v_dot_air 	= m_dot_air/PropsSI('D','T',T_in,'P',P,F$)
w_0		= v_dot_air/A_0
 
N_L		= 6
S_T 		= 60 [mm]*convert(mm,m)
S_L		= S_T
"Width of heat exchanger"
W_hex		= 17*S_T "17 tube in parallel"
 
CaLL External_Flow_FinnedTubeBank(F$,T_in, T_out, P, w_0, A_0, W_hex, N_L, D_o,D_i,S_T,S_L, t_f,D_f,n_f, 'staggered': h,alpha_m,DELTAp, Nusselt, Re,w_s,A_tot,A_t,A_fpt,eta_f,A_to)
 
CALL External_Flow_staggered{Inline}_Bank(F$, T_in, T_out, (T_in+T_out)/2+5,  P, w_0, N_L, D_o,S_T,3^0.5*S_T/2: h1, deltap1, Nusselt1, Re1)}
"~~~~~~~~~~~~~~~~~~~~" 
{Call heattransfer_sp_circulartube(F$,T,P,G,D,L,N_tp:h,DELTAp)
F$ 	= 'Water'
T 	= 25+273.15
P	=1e5
G 	= 1994
D = 0.02291
L = 1
N_tp = 1}
 
{D = 39 [in]*convert(in,m)
m_dot 		= 180000 [lbm/h]*convert(lbm/h,kg/s)
 
mu_v		= 0.0085 [cp]*convert(cp,kg/m-s)
rho_v		= 0.845 [lbm/ft^3]*convert(lbm/ft^3,kg/m^3)
phi			= 1
 
B			= 15.6 [in]*convert(in,m)
A_s		= 0.845 [ft^2]*convert(ft^2,m^2)
G			= m_dot/A_s
 
{If Pitch$ = 'square' Then
	De 		= 4*(Pitch^2-pi#*OD^2/4)/(pi#*OD) "square pitch"
Else
	De		= 4*(Pitch^2*3^0.5/4-pi#*OD^2/8)/(pi#*OD/2) "triangle pitch"
Endif}
De 		= 4*(Pitch^2-pi#*OD^2/4)/(pi#*OD)
//De		= 4*(Pitch^2*3^0.5/4-pi#*OD^2/8)/(pi#*OD/2) "triangle pitch"
pitch = 1.25*od
od = 0.75*convert(in,m)
 
D_e = 0.04583 [ft]*convert(ft,m)
 
Re			= G*D_e/mu_v "Reynolds number"
 
{If ((Re < 2e3) or (Re > 1e6)) Then Call warning('Reynolds number should be in the range from 2e3 to 1e6 for heat transfer coefficient. The value of Reynolds number is XXXA1', Re)
If ((Re < 4e2) or (Re > 1e6)) Then Call warning('Reynolds number should be in the range from 4e2 to 1e6 for pressure drop. The value of Reynolds number is XXXA1', Re)}
 
"! Pressure drop"
N_b 		= L/B-1 
 
L = 16 [ft]*convert(ft,m)
{D_inch = D*convert(m,in)
 
f_1 		= (0.0076+0.000166*D_inch)*Re^(-0.125)
 
//If (D > 23.25*convert(in,m)) Then D = 23.25*convert(in,m) 
 
f_2 		= (0.0016+5.8e-5*23.25)*Re^(-0.157)
f 			= 144*(f_1-1.25*(1-B/D)*(f_1-f_2))}
x_e 		= 0
 
phi_vo 		= 0.33+0.22*x_e+0.61*x_e^2
 
f			= exp(0.576-0.19*ln(Re))
DELTAp	= f*G^2*(N_b+1)*D/(2*rho_v*De*phi)*phi_vo
 
//DELTAp	= f*G^2*(N_b+1)*D/(2000*(rho_v/1000)*D_e*phi)*phi_vo}
"~~~~~~~~~~~~~~~~~~~~"
 
{Call axial_turbine_stage_efficiency(F$,m_dot, h_in,P_in,P_out,stages_N#:eta_s, V_r, SP,N_S,RPM,SP_last)
 
F$ 				= 'hexane'
P_in 			= 8.290 [bar]*convert(bar,Pa)
T_in 			= 155+273.15 
h_in			= propssi('H','P',P_in,'Q',1,F$)
P_out 			= 0.250 [bar]*convert(bar,Pa)
M_dot 			= 2.04 [kg/s]
stages_N# 	= 1}
"~~~~~~~~~~~~~~~~~~~~" 
